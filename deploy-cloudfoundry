#!/usr/bin/env ruby

require 'rubygems'
require 'json'
require 'net/https'
require 'uri'
require 'time'

require 'inifile'
require 'pry'
require 'aws-sdk'
require 'dotenv/load'
require 'rest-client'
require 'terminal-notifier'
require 'tty-table'

if File.file? "#{ENV['HOME']}/.aws/config"
  aws_config = IniFile.new(filename: "#{ENV['HOME']}/.aws/config", encoding: 'UTF-8')

  if aws_config.has_section? 'default'
    region = aws_config['default']['region'] || 'us-east-1'
    Aws.config.update({region: region})
  end
end

if File.file? "#{ENV['HOME']}/.aws/credentials"
  aws_creds = IniFile.new(filename: "#{ENV['HOME']}/.aws/credentials", encoding: 'UTF-8')

  if aws_creds.has_section? 'default'
    access_key = aws_creds['default']['aws_access_key_id'] || raise('no aws_access_key_id configured')
    secret_key = aws_creds['default']['aws_secret_access_key'] || raise('no aws_secret_access_key configured')
    Aws.config.update({credentials: Aws::Credentials.new(access_key, secret_key)})
  end
end

PCF_PIVNET_SLUG = 'elastic-runtime'
PIVNET_TOKEN = ENV.fetch('PIVNET_TOKEN')
RDS_USERNAME = ENV.fetch('RDS_USERNAME')
RDS_PASSWORD = ENV.fetch('RDS_PASSWORD')
STACK_NAME = ARGV[0]

class Duration

  attr_reader :start, :finish

  def initialize(start=Time.now, finish = nil)
    @start = start
    @finish = finish
  end

  def mark_finished(finish=Time.now)
    @finish = finish
  end

  def length
    (@finish || Time.now) - @start
  end

  def formatted_length
    total_seconds = self.length

    hours = total_seconds / (60 * 60)
    hours = hours.to_i > 0 ? ('%02dh' % [hours]) : nil

    minutes = (total_seconds / 60) % 60
    minutes = minutes.to_i > 0 ? ('%02dm' % [minutes]) : nil

    seconds = total_seconds % 60
    seconds = seconds.to_i > 0 ? ('%02ds' % [seconds]) : nil

    [hours, minutes, seconds].compact.join('')
  end
end

class StackResource

  DONE = "\u2714"
  ERROR = "\u2716"

  attr_reader :id, :name, :type, :state, :state_reason, :duration

  def initialize(stack_event)
    @id = stack_event.physical_resource_id
    @name = stack_event.logical_resource_id
    @type = stack_event.resource_type
    @duration = Duration.new(stack_event.timestamp)
    @state = stack_event.resource_status
    @state_reason = stack_event.resource_status_reason
  end

  def update(stack_event)
    return false unless matches_event(stack_event)

    @state = stack_event.resource_status
    @state_reason = stack_event.resource_status_reason

    @duration.mark_finished(stack_event.timestamp) unless deploying?
    true
  end

  def formatted_duration
    duration.formatted_length
  end

  def state_mark
    if done?
      DONE
    elsif error?
      ERROR
    else
      ''
    end
  end

  def done?
    %w{ CREATE_COMPLETE DELETE_COMPLETE UPDATE_COMPLETE }.include?(@state)
  end

  def deploying?
    %w{ CREATE_IN_PROGRESS DELETE_IN_PROGRESS UPDATE_IN_PROGRESS }.include?(@state)
  end

  def error?
    %w{ CREATE_FAILED DELETE_FAILED UPDATE_COMPLETE }.include?(@state)
  end

  def matches_event(stack_event)
    stack_event.physical_resource_id == id
  end

  def eql?(object)
    object.equal?(self) || object.is_a?(self.class) && object.id == id
  end

  def <=>(resource)
    return -1 if done? && !resource.done?
    return 1 if !done? && resource.done?

    [ type, name, id ] <=> [ resource.type, resource.name, resource.id ]
  end

  alias_method :==, :eql?

  def hash
    id.hash
  end

end

class StackEventPoller

  attr_reader :events, :stack_id

  def initialize(stack_id)
    @events = []
    @stack_id = stack_id
  end

  def poll(cf_client)
    new_events = []
    next_token = nil

    loop do
      response = cf_client.describe_stack_events(
        stack_name: stack_id,
        next_token: next_token
      )

      fetched_events = response.stack_events

      new_events.concat(
        last_event_id ?
          fetched_events.take_while { |event| event.event_id != last_event_id }.reverse :
          fetched_events.reverse
      )

      next_token = response.next_token
      break if !next_token
    end

    @events.concat(new_events)
    new_events
  end

  def last_event_id
    @events.empty? ? nil : @events.last.event_id
  end

end

def pivnet_request(url, method: 'GET')
  request_args = {
      method: method,
      url: url,
      open_timeout: 10,
      read_timeout: 10,
      headers: {
          accept: :json,
          'Authorization': "Token #{PIVNET_TOKEN}"
      }
  }

  RestClient::Request.new(request_args)
end

require 'pp'

print "fetching PCF releases from pivnet... "
releases_url = "https://network.pivotal.io/api/v2/products/#{PCF_PIVNET_SLUG}/releases"
response = pivnet_request(releases_url).execute
pcf_release = JSON.parse(response.body).fetch('releases').fetch(0)
puts "found PCF v#{pcf_release.fetch('version')}"

pcf_product_files_url = pcf_release.fetch('_links')
                            .fetch('product_files')
                            .fetch('href')
response = pivnet_request(pcf_product_files_url).execute

print "finding PCF CloudFormation downloads... "
product_files = JSON.parse(response.body).fetch('product_files')
product_file = product_files.find { |f| f.fetch('aws_object_key').end_with? '_cloudformation.json' }
download_url = product_file.fetch('_links')
                   .fetch('download')
                   .fetch('href')

cloudformation_template = begin
  pivnet_request(download_url).execute.body
rescue RestClient::RequestFailed => e
  if e.http_code == 451
    print 'accepting EULA for you... '
    accept_eula_href = JSON.parse(e.http_body)
                           .fetch('_links')
                           .fetch('eula_agreement')
                           .fetch('href')
    pivnet_request(accept_eula_href, method: 'POST').execute
    print 'accepted '
    pivnet_request(download_url).execute.body
  else
    raise e
  end
end
puts "downloaded #{product_file['name']} v#{product_file['file_version']}"

PCF_REGION = Aws.config[:region]
print "finding SSH keypairs in #{PCF_REGION}... "
ec2_client = Aws::EC2::Client.new
key_pair = ec2_client.describe_key_pairs.key_pairs.fetch(0)
puts "found #{key_pair.key_name}"

print "finding SSL cert ARN in #{PCF_REGION}... "
iam_client = Aws::IAM::Client.new
ssl_cert = iam_client.list_server_certificates.server_certificate_metadata_list.fetch(0)
puts "found #{ssl_cert.arn}"

puts "creating AWS CF stack #{STACK_NAME}... "
stack_create_duration = Duration.new
cf_client = Aws::CloudFormation::Client.new
response = cf_client.create_stack(
    {
        stack_name: STACK_NAME,
        template_body: cloudformation_template,
        parameters: [
            {
                parameter_key: '01NATKeyPair',
                parameter_value: key_pair.key_name,
            },
            {
                parameter_key: '05RdsUsername',
                parameter_value: RDS_USERNAME,
            },
            {
                parameter_key: '06RdsPassword',
                parameter_value: RDS_PASSWORD,
            },
            {
                parameter_key: '07SSLCertificateARN',
                parameter_value: ssl_cert.arn,
            }
        ],
        capabilities: %w(CAPABILITY_NAMED_IAM CAPABILITY_IAM)
    }
)
puts "=> creating #{response.stack_id}"

pollers = [StackEventPoller.new(STACK_NAME)]
resources = []
headers = %w(Type Name Status Duration Notes)

cf_client.wait_until(:stack_create_complete) do |waiter|
  waiter.before_wait do |attempts, response|
    pollers.each do |poller|
      new_events = poller.poll(cf_client)

      new_events.each do |event|
        if resources.none? { |resource| resource.update(event) }
          resources << StackResource.new(event)
        end
      end

      next unless pollers.length < 2

      opsman_stack_event = new_events.find do |e|
        e.logical_resource_id == 'OpsManStack' &&
          e.resource_status == 'CREATE_IN_PROGRESS' &&
          e.resource_status_reason
      end

      if opsman_stack_event
        opsman_stack_id = opsman_stack_event.physical_resource_id
        pollers << StackEventPoller.new(opsman_stack_id)
      end
    end

    now = Time.now
    resources = resources.sort_by { |resource| resource.duration.finish || now }
    rows = resources.map { |r| [ r.type, r.name, r.state_mark, r.formatted_duration, r.state_reason ] }

    table = TTY::Table.new(header: headers, rows: rows)
    print table.render :unicode, resize: true
  end
end

stack_create_duration.mark_finished
message = "deployment of #{STACK_NAME} to AWS finished in #{stack_create_duration.formatted_length}"
puts message
TerminalNotifier.notify(message)

